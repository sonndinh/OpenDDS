name: "Build & Test"

on:
  push:
    branches:
      - master
      - branch-DDS-3.*
      - gh_wf_*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "pull_request.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!.github/workflows/sphinx_strict.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/gitrelease.pl'
      - '!tools/scripts/lint.pl'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  pull_request:
    branches:
      - master
      - branch-DDS-3.*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "push.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!.github/workflows/sphinx_strict.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/gitrelease.pl'
      - '!tools/scripts/lint.pl'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:

  ACE_TAO_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    steps:
    - name: check core file pattern
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
        cat /proc/sys/kernel/core_uses_pid
    - name: try to change core file pattern
      shell: bash
      run: |
        sudo sysctl -w kernel.core_pattern=core.%e.%p
    - name: check core file pattern after updating
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
    - name: check ulimit
      shell: bash
      run: ulimit
    - name: install gdb
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install gdb
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: get compiler version
      shell: bash
      run: |
        export COMPILER_VERSION=$(c++ --version 2>&1 | head -n 1)
        echo "COMPILER_VERSION=$COMPILER_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v3
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.COMPILER_VERSION }}
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --no-inline --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_i0_xer0_js0_j12

    steps:
    - name: check core file pattern
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
        cat /proc/sys/kernel/core_uses_pid
    - name: try to change core file pattern
      shell: bash
      run: |
        sudo sysctl -w kernel.core_pattern=core.%e.%p
    - name: check core file pattern after updating
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
    - name: check ulimit
      shell: bash
      run: ulimit
    - name: checkout MPC
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v3
      with:
        name: ACE_TAO_u18_i0_xer0_js0_j12_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_i0_xer0_js0_j12.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --no-inline --java=/usr/lib/jvm/adoptopenjdk-12-hotspot-amd64 --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: Build Messenger test
      shell: bash
      run: |
        source OpenDDS/setenv.sh
        cd OpenDDS/tests/DCPS/Messenger
        mwc.pl -type gnuace
        make -j4
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    needs: build_u18_i0_xer0_js0_j12

    steps:
    - name: check core file pattern
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
        cat /proc/sys/kernel/core_uses_pid
    - name: try to change core file pattern
      shell: bash
      run: |
        sudo sysctl -w kernel.core_pattern=core.%e.%p
    - name: check core file pattern after updating
      shell: bash
      run: |
        cat /proc/sys/kernel/core_pattern
    - name: check ulimit
      shell: bash
      run: |
        ulimit -c
        echo Setting ulimit to unlimited
        ulimit -c unlimited
    - name: install gdb
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install gdb
    - name: checkout MPC
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v3
      with:
        name: ACE_TAO_u18_i0_xer0_js0_j12_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_i0_xer0_js0_j12.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v3
      with:
        name: build_u18_i0_xer0_js0_j12_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_i0_xer0_js0_j12.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        ulimit -c unlimited
        cat /proc/sys/kernel/core_pattern
        cd OpenDDS
        echo "export ACE_TEST_LOG_STUCK_STACKS=1" >> setenv.sh
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS tests/messenger_ci_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/output.log_Brief.html"
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"

  ACE_TAO_m10_o1d0_sec:

    runs-on: macos-10.15

    steps:
    - name: check lldb version
      shell: bash
      run: lldb --version
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: get compiler version
      shell: bash
      run: |
        export COMPILER_VERSION=$(c++ --version 2>&1 | head -n 1)
        echo "COMPILER_VERSION=$COMPILER_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v3
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.COMPILER_VERSION }}
    - name: install xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        brew install xerces-c
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --optimize --no-debug --std=c++11 --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl@1.1
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_m10_o1d0_sec:

    runs-on: macos-10.15

    needs: ACE_TAO_m10_o1d0_sec

    steps:
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v3
      with:
        name: ACE_TAO_m10_o1d0_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_o1d0_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --optimize --no-debug --std=c++11 --rapidjson --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl@1.1
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: Build Messenger test
      shell: bash
      run: |
        source OpenDDS/setenv.sh
        cd OpenDDS/tests/DCPS/Messenger
        mwc.pl -type gnuace
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_m10_o1d0_sec:

    runs-on: macos-10.15

    needs: build_m10_o1d0_sec

    steps:
    - name: check lldb version
      shell: bash
      run: lldb --version
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v3
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v3
      with:
        repository: sonndinh/ACE_TAO
        ref: print_stack_trace
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v3
      with:
        name: ACE_TAO_m10_o1d0_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_o1d0_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v3
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v3
      with:
        name: build_m10_o1d0_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_m10_o1d0_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        sudo su
        ulimit -c unlimited
        echo "Contents of /cores before: "
        ls /cores
        echo "Changing permission to /cores..."
        chmod -R +rwx /cores
        echo "Show stat /cores:"
        stat /cores
        echo "Running sysctl kern.coredump"
        sysctl kern.coredump
        echo "Creating a file in /cores..."
        touch /cores/test
        ls /cores
        rm /cores/test
        cd OpenDDS
        echo "export ACE_TEST_LOG_STUCK_STACKS=1" >> setenv.sh
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS tests/messenger_ci_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
        echo "Contents of /cores after: "
        ls /cores
    - name: upload autobuild output
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/output.log_Brief.html"
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
